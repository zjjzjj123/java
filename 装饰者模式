对象增强的手段
* 继承
  被增强的对象固定的
  增强的内容也是固定的
* 装饰者模式
  被增强的对象是可以切换的
  增强的内容是固定的
* 动态代理（AOP）
  被增强的对象可以切换：Service
  增强的内容也可以切换：事务处理

--------------------------

继承：

缺点：
1. 增强的内容是死的，不能动！
2. 被增强的对象也是死的！

使用继承会使类增多！！！

class 咖啡类 {}

class 有糖咖啡 extends 咖啡类 {
}

class 加奶咖啡 extends 咖啡类 {
}

class 加盐咖啡 extends 咖啡类 {
}

class 加糖加奶 extends 加奶 {
}

---------------------------

装饰者模式

1. 增强的内容是不能修改的！
2. 被增强的对象可以是任意的！

class 咖啡类 {}

class 有糖咖啡 extends 咖啡类 {
}

class 加奶咖啡 extends 咖啡类 {
}

class 加盐咖啡 extends 咖啡类 {
}

咖啡 a = new 加糖();
咖啡 b = new 加盐(a);//对a进行装饰，就是给a加盐
咖啡 c = new 加奶(b);

Java API
IO流！

四大家：
1. 字节：InputStream、OutputStream
2. 字符：Reader、Writer

InputStream
FileInputSteram：它是节点流！就是和一个资源绑定在一起的！文件！
BufferedInputStream：它是装饰流！创建我是一定要给我一个底层对象，然后我不管你给我的是什么流，我都会给它添加缓冲区！

new BufferedInputStream(任意的InputStream)

FileInputStream in = new FileInputStream("F:/a.jpg");
BufferedInputStream b = new BufferedInputStream(in);
ObjectInputStream o = new ObjectInputStream(b);


--------------------------

Connection con = ...

装饰：不知道被增强对象的具体类型时，可以使用！

1. 是你还有你，一切拜托你！

is a
has a
use a

class MyConnection implements Connection {//是你
	// 还有你
	private Connection con;//底层对象，被增强对象

	public MyConnection(Connection con){//通过构造器传递底层对象！
	    this.con = con;
	}

	// 一切拜托你
	public Statement createStatement() {
		return con.createStatement();
	}

	// 增强点
	public void close(){
		把当前连接归还给池！
	}
}

Connection con = 通过四大参数创建连接对象！是由mysql提供的！
Connection con1 = new MyConnection(con);

con1.createStatement()
con.createStatement();

con1.close();
con.close();

